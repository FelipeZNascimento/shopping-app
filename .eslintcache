[{"C:\\workspace\\shopping-app\\src\\index.tsx":"1","C:\\workspace\\shopping-app\\src\\store\\main\\reducer.js":"2","C:\\workspace\\shopping-app\\src\\serviceWorker.ts":"3","C:\\workspace\\shopping-app\\src\\sections\\index.ts":"4","C:\\workspace\\shopping-app\\src\\components\\index.ts":"5","C:\\workspace\\shopping-app\\src\\store\\place\\reducer.ts":"6","C:\\workspace\\shopping-app\\src\\store\\shopping_list\\reducer.ts":"7","C:\\workspace\\shopping-app\\src\\store\\brand\\reducer.ts":"8","C:\\workspace\\shopping-app\\src\\store\\product\\reducer.ts":"9","C:\\workspace\\shopping-app\\src\\store\\purchase\\reducer.ts":"10","C:\\workspace\\shopping-app\\src\\constants\\routes.tsx":"11","C:\\workspace\\shopping-app\\src\\store\\actionTypes.js":"12","C:\\workspace\\shopping-app\\src\\sections\\brands\\brands.tsx":"13","C:\\workspace\\shopping-app\\src\\sections\\home\\home.tsx":"14","C:\\workspace\\shopping-app\\src\\sections\\menu\\menu.tsx":"15","C:\\workspace\\shopping-app\\src\\sections\\categories\\categories.tsx":"16","C:\\workspace\\shopping-app\\src\\sections\\product\\product.tsx":"17","C:\\workspace\\shopping-app\\src\\sections\\purchases\\purchase_history.tsx":"18","C:\\workspace\\shopping-app\\src\\sections\\new_purchase\\new_purchase.tsx":"19","C:\\workspace\\shopping-app\\src\\sections\\sidebar_list\\sidebar_list.tsx":"20","C:\\workspace\\shopping-app\\src\\sections\\shopping_list\\shopping_list.tsx":"21","C:\\workspace\\shopping-app\\src\\components\\dialogs\\form_dialog.tsx":"22","C:\\workspace\\shopping-app\\src\\components\\dialogs\\confirmation_dialog.tsx":"23","C:\\workspace\\shopping-app\\src\\components\\autocomplete\\autocomplete.tsx":"24","C:\\workspace\\shopping-app\\src\\components\\place_icon\\place_icon.tsx":"25","C:\\workspace\\shopping-app\\src\\components\\datepicker\\datepicker.tsx":"26","C:\\workspace\\shopping-app\\src\\components\\info_card\\info_card.tsx":"27","C:\\workspace\\shopping-app\\src\\components\\generic_table\\generic_table.tsx":"28","C:\\workspace\\shopping-app\\src\\components\\loading\\loading.tsx":"29","C:\\workspace\\shopping-app\\src\\components\\dropdown\\dropdown.tsx":"30","C:\\workspace\\shopping-app\\src\\components\\notification\\notification.tsx":"31","C:\\workspace\\shopping-app\\src\\components\\search_input\\search_input.tsx":"32","C:\\workspace\\shopping-app\\src\\components\\separator\\separator.tsx":"33","C:\\workspace\\shopping-app\\src\\sections\\products\\list\\products.tsx":"34","C:\\workspace\\shopping-app\\src\\sections\\places\\list\\places.tsx":"35","C:\\workspace\\shopping-app\\src\\sections\\products\\categories\\products_categories.tsx":"36","C:\\workspace\\shopping-app\\src\\sections\\places\\categories\\places_categories.tsx":"37","C:\\workspace\\shopping-app\\src\\store\\main\\selector.js":"38","C:\\workspace\\shopping-app\\src\\store\\place\\actions.ts":"39","C:\\workspace\\shopping-app\\src\\store\\place\\selector.ts":"40","C:\\workspace\\shopping-app\\src\\sections\\places\\list\\components\\delete_place_modal.tsx":"41","C:\\workspace\\shopping-app\\src\\sections\\places\\list\\components\\add_place_modal.tsx":"42","C:\\workspace\\shopping-app\\src\\utils\\utils.ts":"43","C:\\workspace\\shopping-app\\src\\store\\product\\selector.ts":"44","C:\\workspace\\shopping-app\\src\\store\\product\\actions.ts":"45","C:\\workspace\\shopping-app\\src\\constants\\general.tsx":"46","C:\\workspace\\shopping-app\\src\\store\\purchase\\selector.ts":"47","C:\\workspace\\shopping-app\\src\\store\\purchase\\actions.ts":"48","C:\\workspace\\shopping-app\\src\\store\\shopping_list\\selector.ts":"49","C:\\workspace\\shopping-app\\src\\store\\shopping_list\\actions.ts":"50","C:\\workspace\\shopping-app\\src\\sections\\products\\list\\components\\delete_product_modal.tsx":"51","C:\\workspace\\shopping-app\\src\\sections\\products\\list\\components\\add_product_modal.tsx":"52","C:\\workspace\\shopping-app\\src\\services\\dataSetters.ts":"53","C:\\workspace\\shopping-app\\src\\services\\dataGetters.ts":"54","C:\\workspace\\shopping-app\\src\\services\\dataDeleters.ts":"55","C:\\workspace\\shopping-app\\src\\constants\\objectModels.tsx":"56","C:\\workspace\\shopping-app\\src\\services\\utilities.js":"57","C:\\workspace\\shopping-app\\src\\constants\\products.tsx":"58","C:\\workspace\\shopping-app\\src\\sections\\new_purchase\\components\\product_card.tsx":"59","C:\\workspace\\shopping-app\\src\\sections\\purchases\\components\\full_purchase.tsx":"60","C:\\workspace\\shopping-app\\src\\sections\\categories\\components\\add_category_modal.tsx":"61","C:\\workspace\\shopping-app\\src\\sections\\categories\\components\\delete_category_modal.tsx":"62","C:\\workspace\\shopping-app\\src\\sections\\brands\\components\\delete_brand_modal.tsx":"63","C:\\workspace\\shopping-app\\src\\sections\\brands\\components\\add_brand_modal.tsx":"64","C:\\workspace\\shopping-app\\src\\store\\brand\\actions.ts":"65","C:\\workspace\\shopping-app\\src\\store\\brand\\selector.ts":"66"},{"size":6615,"mtime":1650047253558,"results":"67","hashOfConfig":"68"},{"size":610,"mtime":1650042918229,"results":"69","hashOfConfig":"68"},{"size":4684,"mtime":1650042918226,"results":"70","hashOfConfig":"68"},{"size":900,"mtime":1650042918218,"results":"71","hashOfConfig":"68"},{"size":806,"mtime":1650042918205,"results":"72","hashOfConfig":"68"},{"size":5013,"mtime":1650042918230,"results":"73","hashOfConfig":"68"},{"size":1852,"mtime":1650042918233,"results":"74","hashOfConfig":"68"},{"size":2531,"mtime":1650042918228,"results":"75","hashOfConfig":"68"},{"size":5717,"mtime":1650042918231,"results":"76","hashOfConfig":"68"},{"size":3608,"mtime":1650042918232,"results":"77","hashOfConfig":"68"},{"size":625,"mtime":1650042918209,"results":"78","hashOfConfig":"68"},{"size":8079,"mtime":1650042918228,"results":"79","hashOfConfig":"68"},{"size":7434,"mtime":1650042918217,"results":"80","hashOfConfig":"68"},{"size":1746,"mtime":1650042918218,"results":"81","hashOfConfig":"68"},{"size":5561,"mtime":1650042918219,"results":"82","hashOfConfig":"68"},{"size":6043,"mtime":1650042918218,"results":"83","hashOfConfig":"68"},{"size":9600,"mtime":1650042918223,"results":"84","hashOfConfig":"68"},{"size":3226,"mtime":1650047253559,"results":"85","hashOfConfig":"68"},{"size":7617,"mtime":1650047253559,"results":"86","hashOfConfig":"68"},{"size":3148,"mtime":1650047253560,"results":"87","hashOfConfig":"68"},{"size":9128,"mtime":1650047253559,"results":"88","hashOfConfig":"68"},{"size":1380,"mtime":1650042918204,"results":"89","hashOfConfig":"68"},{"size":1857,"mtime":1650042918204,"results":"90","hashOfConfig":"68"},{"size":1417,"mtime":1650042918203,"results":"91","hashOfConfig":"68"},{"size":1145,"mtime":1650042918207,"results":"92","hashOfConfig":"68"},{"size":1150,"mtime":1650042918203,"results":"93","hashOfConfig":"68"},{"size":1741,"mtime":1650042918206,"results":"94","hashOfConfig":"68"},{"size":3807,"mtime":1650042918205,"results":"95","hashOfConfig":"68"},{"size":469,"mtime":1650042918206,"results":"96","hashOfConfig":"68"},{"size":986,"mtime":1650042918205,"results":"97","hashOfConfig":"68"},{"size":1646,"mtime":1650042918207,"results":"98","hashOfConfig":"68"},{"size":869,"mtime":1650042918207,"results":"99","hashOfConfig":"68"},{"size":186,"mtime":1650042918208,"results":"100","hashOfConfig":"68"},{"size":11559,"mtime":1650047253559,"results":"101","hashOfConfig":"68"},{"size":8067,"mtime":1650042918222,"results":"102","hashOfConfig":"68"},{"size":3608,"mtime":1650042918223,"results":"103","hashOfConfig":"68"},{"size":3560,"mtime":1650042918221,"results":"104","hashOfConfig":"68"},{"size":351,"mtime":1650042918229,"results":"105","hashOfConfig":"68"},{"size":9055,"mtime":1650042918230,"results":"106","hashOfConfig":"68"},{"size":1045,"mtime":1650042918230,"results":"107","hashOfConfig":"68"},{"size":1377,"mtime":1650042918221,"results":"108","hashOfConfig":"68"},{"size":3059,"mtime":1650042918221,"results":"109","hashOfConfig":"68"},{"size":670,"mtime":1650042918235,"results":"110","hashOfConfig":"68"},{"size":1351,"mtime":1650042918231,"results":"111","hashOfConfig":"68"},{"size":10112,"mtime":1650042918231,"results":"112","hashOfConfig":"68"},{"size":3194,"mtime":1650042988886,"results":"113","hashOfConfig":"68"},{"size":1037,"mtime":1650042918232,"results":"114","hashOfConfig":"68"},{"size":4815,"mtime":1650042918232,"results":"115","hashOfConfig":"68"},{"size":297,"mtime":1650042918233,"results":"116","hashOfConfig":"68"},{"size":4385,"mtime":1650042918233,"results":"117","hashOfConfig":"68"},{"size":1397,"mtime":1650042918224,"results":"118","hashOfConfig":"68"},{"size":3035,"mtime":1650042918223,"results":"119","hashOfConfig":"68"},{"size":4176,"mtime":1650042918227,"results":"120","hashOfConfig":"68"},{"size":1618,"mtime":1650042918227,"results":"121","hashOfConfig":"68"},{"size":1258,"mtime":1650042918227,"results":"122","hashOfConfig":"68"},{"size":464,"mtime":1650042918208,"results":"123","hashOfConfig":"68"},{"size":2942,"mtime":1650042918227,"results":"124","hashOfConfig":"68"},{"size":346,"mtime":1650042918209,"results":"125","hashOfConfig":"68"},{"size":5706,"mtime":1650042918220,"results":"126","hashOfConfig":"68"},{"size":5777,"mtime":1650042918225,"results":"127","hashOfConfig":"68"},{"size":1261,"mtime":1650042918218,"results":"128","hashOfConfig":"68"},{"size":1106,"mtime":1650042918218,"results":"129","hashOfConfig":"68"},{"size":1033,"mtime":1650042918217,"results":"130","hashOfConfig":"68"},{"size":1494,"mtime":1650042918217,"results":"131","hashOfConfig":"68"},{"size":4507,"mtime":1650042918228,"results":"132","hashOfConfig":"68"},{"size":504,"mtime":1650042918229,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"o8flyw",{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\workspace\\shopping-app\\src\\index.tsx",[],"C:\\workspace\\shopping-app\\src\\store\\main\\reducer.js",[],"C:\\workspace\\shopping-app\\src\\serviceWorker.ts",[],"C:\\workspace\\shopping-app\\src\\sections\\index.ts",[],"C:\\workspace\\shopping-app\\src\\components\\index.ts",[],"C:\\workspace\\shopping-app\\src\\store\\place\\reducer.ts",[],"C:\\workspace\\shopping-app\\src\\store\\shopping_list\\reducer.ts",[],"C:\\workspace\\shopping-app\\src\\store\\brand\\reducer.ts",[],"C:\\workspace\\shopping-app\\src\\store\\product\\reducer.ts",[],"C:\\workspace\\shopping-app\\src\\store\\purchase\\reducer.ts",[],"C:\\workspace\\shopping-app\\src\\constants\\routes.tsx",[],"C:\\workspace\\shopping-app\\src\\store\\actionTypes.js",[],"C:\\workspace\\shopping-app\\src\\sections\\brands\\brands.tsx",[],"C:\\workspace\\shopping-app\\src\\sections\\home\\home.tsx",[],"C:\\workspace\\shopping-app\\src\\sections\\menu\\menu.tsx",[],"C:\\workspace\\shopping-app\\src\\sections\\categories\\categories.tsx",["279"],"import React, { useState } from 'react';\r\n\r\n// Components\r\nimport { Fab, IconButton } from '@material-ui/core';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport { AddCircle as AddIcon, Delete as DeleteIcon } from '@material-ui/icons';\r\nimport { GenericTable, SearchInput } from 'components/index';\r\nimport AddCategoryModal from './components/add_category_modal';\r\nimport DeleteCategoryModal from './components/delete_category_modal';\r\n\r\n// Types\r\nimport { TCategory } from 'constants/objectInterfaces';\r\nimport { IAutocompleteItem } from 'components/autocomplete/types';\r\nimport { TSortingState } from 'components/generic_table/types';\r\nimport { resultsPerPage } from 'constants/general';\r\n\r\nimport styles from './categories.module.scss';\r\n\r\ntype TProps = {\r\n    color: string;\r\n    data: TCategory[];\r\n    isLoading?: boolean;\r\n    searchValue: string;\r\n    searchOptions: TCategory[];\r\n    sortState: TSortingState;\r\n    totalCount: number;\r\n    onAddNewCategory: (categoryName: string) => void;\r\n    onDeleteCategory: (category: TCategory) => void;\r\n    onPageChange: (page: number) => void;\r\n    onSearch: (item: IAutocompleteItem | string | null) => void;\r\n    onSortChange: (currentPage: number, column: string, direction: string) => void;\r\n};\r\n\r\nconst defaultSortState = {\r\n    orderBy: 'description',\r\n    sort: 'ASC'\r\n};\r\n\r\nconst CategoriesSection = ({\r\n    color,\r\n    data,\r\n    isLoading = false,\r\n    searchValue = '',\r\n    searchOptions,\r\n    sortState = defaultSortState,\r\n    totalCount,\r\n    onAddNewCategory,\r\n    onDeleteCategory,\r\n    onPageChange,\r\n    onSearch,\r\n    onSortChange\r\n}: TProps) => {\r\n    const [currentPage, setCurrentPage] = useState<number>(1);\r\n    const [isAddModalOpen, setIsAddModalOpen] = useState(false);\r\n    const [toBeDeleted, setToBeDeleted] = useState<TCategory | null>(null);\r\n\r\n    const headerColumns = [\r\n        {\r\n            key: 'id',\r\n            renderFunction: () => 'Id',\r\n            sortable: true,\r\n            showOnMobile: false\r\n        },\r\n        {\r\n            key: 'description',\r\n            renderFunction: () => 'Categoria',\r\n            sortable: true,\r\n            showOnMobile: true\r\n        },\r\n        {\r\n            key: 'delete',\r\n            renderFunction: () => '',\r\n            sortable: false,\r\n            showOnMobile: true\r\n        }\r\n    ];\r\n\r\n    const renderDeleteIcon = (item: TCategory) => (\r\n        <IconButton\r\n            aria-label=\"delete\"\r\n            classes={{ root: styles.icon }}\r\n            onClick={() => setToBeDeleted(item)}\r\n        >\r\n            <DeleteIcon classes={{ root: styles.icon }} />\r\n        </IconButton>\r\n    );\r\n\r\n    const bodyColumns = [\r\n        {\r\n            key: 'id',\r\n            renderFunction: (item: TCategory) => <td className=\"align-left\">{item.id}</td>,\r\n            showOnMobile: false\r\n        },\r\n        {\r\n            key: 'description',\r\n            renderFunction: (item: TCategory) => <td className=\"align-left\">{item.description}</td>,\r\n            showOnMobile: true\r\n        },\r\n        {\r\n            key: 'delete',\r\n            renderFunction: (item: TCategory) => <td className=\"align-right\">{renderDeleteIcon(item)}</td>,\r\n            showOnMobile: true\r\n        }\r\n    ];\r\n\r\n    const deleteCategory = () => {\r\n        if (toBeDeleted) {\r\n            onDeleteCategory(toBeDeleted);\r\n        }\r\n        setToBeDeleted(null);\r\n    };\r\n\r\n    const addNewCategory = (categoryName: string) => {\r\n        onAddNewCategory(categoryName);\r\n        setIsAddModalOpen(false);\r\n    };\r\n\r\n    const onPagination = (event: any, newPage: number) => {\r\n        setCurrentPage(newPage);\r\n        onPageChange(newPage);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Fab\r\n                classes={{ root: `of-${color}-bg` }}\r\n                className=\"fab-bottom\"\r\n                size=\"large\"\r\n                variant=\"extended\"\r\n                onClick={() => setIsAddModalOpen(true)}\r\n            >\r\n                <AddIcon />&nbsp;\r\n                Nova categoria\r\n            </Fab>\r\n            <div className={styles.container}>\r\n                <SearchInput\r\n                    options={searchOptions}\r\n                    onSearch={onSearch}\r\n                />\r\n                <div className={styles.pagination}>\r\n                    <Pagination\r\n                        color=\"primary\"\r\n                        count={Math.ceil(totalCount / resultsPerPage)}\r\n                        page={currentPage}\r\n                        size=\"large\"\r\n                        shape=\"rounded\"\r\n                        onChange={onPagination}\r\n                    />\r\n                </div>\r\n                <GenericTable\r\n                    bodyColumns={isLoading ? [] : bodyColumns}\r\n                    color={color}\r\n                    data={data}\r\n                    headerColumns={headerColumns}\r\n                    isLoading={isLoading}\r\n                    sortState={sortState}\r\n                    onSortChange={(column: string, direction: string) => onSortChange(currentPage, column, direction)}\r\n                />\r\n                <div className={styles.pagination}>\r\n                    <Pagination\r\n                        color=\"primary\"\r\n                        count={Math.ceil(totalCount / resultsPerPage)}\r\n                        page={currentPage}\r\n                        size=\"large\"\r\n                        shape=\"rounded\"\r\n                        onChange={onPagination}\r\n                    />\r\n                </div>\r\n                <AddCategoryModal\r\n                    isOpen={isAddModalOpen}\r\n                    value={searchValue}\r\n                    onClose={() => setIsAddModalOpen(false)}\r\n                    onConfirm={addNewCategory}\r\n                />\r\n                <DeleteCategoryModal\r\n                    category={toBeDeleted}\r\n                    onClose={() => setToBeDeleted(null)}\r\n                    onConfirm={deleteCategory}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CategoriesSection;\r\n","C:\\workspace\\shopping-app\\src\\sections\\product\\product.tsx",["280"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\n\r\nimport moment from 'moment';\r\nimport 'moment/locale/pt-br';\r\nimport {\r\n    CartesianGrid,\r\n    LineChart,\r\n    Tooltip,\r\n    Line,\r\n    ResponsiveContainer,\r\n    XAxis,\r\n    YAxis\r\n} from 'recharts';\r\n\r\n// Actions\r\nimport { fetchProductHistory } from 'store/product/actions';\r\n\r\n// Selectors\r\nimport {\r\n    selectProductHistory,\r\n    selectIsLoading,\r\n    selectProductInfo\r\n} from 'store/product/selector';\r\n\r\n// Components\r\nimport { GenericTable, InfoCard, Loading } from 'components/index';\r\nimport {\r\n    Button\r\n} from '@material-ui/core';\r\n// Constants, types and tnterfaces\r\nimport {\r\n    TProductHistoryItem,\r\n    TProduct\r\n} from 'constants/objectInterfaces';\r\nimport { TSortingState } from 'components/generic_table/types';\r\nimport { TProductGraphic } from './types';\r\nimport { getUnitObject } from 'constants/products';\r\n\r\n// Utilities and Style\r\nimport { invertSort } from 'utils/utils';\r\nimport styles from './product.module.scss';\r\n\r\nconst defaultSortState = {\r\n    orderBy: 'price',\r\n    sort: 'ASC'\r\n};\r\n\r\nconst SingleProduct = () => {\r\n    const [currentSortState, setCurrentSortState] = useState<TSortingState>(defaultSortState);\r\n    const [tableData, setTableData] = useState<TProductHistoryItem[]>([]);\r\n    const [graphicData, setGraphicData] = useState<TProductGraphic[]>([]);\r\n    const [selectedProduct, setSelectedProduct] = useState<TProduct | null>(null);\r\n    const [productUnits, setProductUnits] = useState<number[]>([]);\r\n    const [selectedProductUnit, setSelectedProductUnit] = useState<number>(0);\r\n\r\n    const dispatch = useDispatch();\r\n    const { productId } = useParams<{ productId: string }>();\r\n    const productHistory: TProductHistoryItem[] = useSelector(selectProductHistory);\r\n    const productInfo = useSelector(selectProductInfo);\r\n\r\n    const isLoading = useSelector(selectIsLoading);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchProductHistory(parseInt(productId)));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (productInfo && !isLoading) {\r\n            setSelectedProduct(productInfo);\r\n        }\r\n    }, [productInfo]);\r\n\r\n    useEffect(() => {\r\n        if (productHistory && !isLoading) {\r\n            const dataTable: TProductHistoryItem[] = [];\r\n            const dataGraphic: TProductGraphic[] = [];\r\n            const allUnits: number[] = [];\r\n\r\n            productHistory.forEach((item) => {\r\n                if (!allUnits.find((unit) => unit === item.unit)) {\r\n                    allUnits.push(item.unit);\r\n                }\r\n\r\n                if (allUnits.length > 0 && item.unit === allUnits[0]) {\r\n                    dataGraphic.push({\r\n                        brand: item.brand?.description,\r\n                        date: moment(item.date).format('DD/MM/YYYY'),\r\n                        discount: item.discount,\r\n                        details: item.details,\r\n                        price: item.price,\r\n                        unit: item.unit,\r\n                        place: item.place.description\r\n                    })\r\n\r\n                    dataTable.push(item);\r\n                }\r\n            });\r\n\r\n            setProductUnits(allUnits);\r\n            setSelectedProductUnit(allUnits[0]);\r\n            setGraphicData(dataGraphic);\r\n            setTableData(dataTable);\r\n        }\r\n    }, [productHistory]);\r\n\r\n    useEffect(() => {\r\n        const dataTable: TProductHistoryItem[] = [];\r\n        const dataGraphic: TProductGraphic[] = [];\r\n\r\n        productHistory.forEach((item) => {\r\n            if (item.unit === selectedProductUnit) {\r\n                dataGraphic.push({\r\n                    brand: item.brand?.description,\r\n                    date: moment(item.date).format('DD/MM/YYYY'),\r\n                    discount: item.discount,\r\n                    details: item.details,\r\n                    price: item.price,\r\n                    unit: item.unit,\r\n                    place: item.place.description\r\n                })\r\n\r\n                dataTable.push(item);\r\n            }\r\n        });\r\n\r\n        setGraphicData(dataGraphic);\r\n        setTableData(dataTable);\r\n    }, [selectedProductUnit]);\r\n\r\n    if (isLoading) {\r\n        return <Loading />;\r\n    }\r\n\r\n    const headers = [\r\n        {\r\n            key: 'place',\r\n            renderFunction: () => 'Lugar',\r\n            sortable: true,\r\n            showOnMobile: true\r\n        },\r\n        {\r\n            key: 'brand',\r\n            renderFunction: () => 'Marca',\r\n            sortable: false,\r\n            showOnMobile: false\r\n        },\r\n        {\r\n            key: 'details',\r\n            renderFunction: () => 'Detalhes',\r\n            sortable: false,\r\n            showOnMobile: false\r\n        },\r\n        {\r\n            key: 'price',\r\n            renderFunction: () => 'Preço',\r\n            sortable: true,\r\n            showOnMobile: true\r\n        },\r\n        {\r\n            key: 'date',\r\n            renderFunction: () => 'Data',\r\n            sortable: true,\r\n            showOnMobile: true\r\n        }\r\n    ];\r\n\r\n    const bodyColumns = [\r\n        {\r\n            key: 'place',\r\n            renderFunction: (item: TProductHistoryItem) => <td className=\"align-left\">{item.place.description}</td>,\r\n            showOnMobile: true\r\n        },\r\n        {\r\n            key: 'brand',\r\n            renderFunction: (item: TProductHistoryItem) => <td>{item.brand ? item.brand.description : '-'}</td>,\r\n            showOnMobile: false\r\n        },\r\n        {\r\n            key: 'details',\r\n            renderFunction: (item: TProductHistoryItem) => <td>{item.details ? item.details : '-'}</td>,\r\n            showOnMobile: false\r\n        },\r\n        {\r\n            key: 'price',\r\n            renderFunction: (item: TProductHistoryItem) => (\r\n                <td className={item.discount ? 'of-green' : ''}>\r\n                    € {item.price} / {getUnitObject(item.unit).description}\r\n                </td>\r\n            ),\r\n            showOnMobile: true\r\n        },\r\n        {\r\n            key: 'date',\r\n            renderFunction: (item: TProductHistoryItem) => <td>{moment(item.date).format('DD/MM/YYYY')}</td>,\r\n            showOnMobile: true\r\n        }\r\n    ];\r\n\r\n    const onSortChange = (orderBy: string, sort: string) => {\r\n        const newSort: string = orderBy === currentSortState.orderBy ? invertSort(currentSortState.sort) : sort;\r\n\r\n        setCurrentSortState({ orderBy, sort: newSort });\r\n        dispatch(fetchProductHistory(parseInt(productId), { orderBy, sort: newSort }));\r\n    };\r\n\r\n    const renderTooltip = ({ active, payload }: any) => {\r\n        if (active && payload && payload.length) {\r\n            const dataInfo: TProductGraphic = payload[0].payload;\r\n            return (\r\n                <div className={styles.tooltip}>\r\n                    <p className={styles.place}>{dataInfo.place}</p>\r\n                    <p className={styles.date}>{dataInfo.date}</p>\r\n                    <p className={styles.brand}>{dataInfo.brand}</p>\r\n                    {dataInfo.details && <p>{dataInfo.details}</p>}\r\n                    <p className={dataInfo.discount ? styles.discount : styles.price}>€ {dataInfo.price}</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    const renderLineChart = () => (\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <LineChart data={graphicData}\r\n                margin={{\r\n                    top: 0,\r\n                    right: 10,\r\n                    left: 0,\r\n                    bottom: 0,\r\n                }}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <Line type=\"monotone\" dataKey=\"price\" stroke=\"green\" />\r\n                <Tooltip content={renderTooltip} />\r\n                <XAxis dataKey=\"date\" />\r\n                <YAxis />\r\n            </LineChart>\r\n        </ResponsiveContainer>\r\n    );\r\n\r\n    const renderUnits = () => {\r\n        if (productUnits.length <= 1) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className={styles.unitsContainer}>\r\n                {productUnits.map((unit) => (\r\n                    <Button\r\n                        color=\"primary\"\r\n                        classes={{ root: styles.button }}\r\n                        variant={selectedProductUnit === unit ? 'outlined' : 'text'}\r\n                        onClick={() => setSelectedProductUnit(unit)}\r\n                    >\r\n                        {getUnitObject(unit).description}\r\n                    </Button>\r\n                ))}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {selectedProduct && <InfoCard\r\n                responsiveWidth\r\n                color={'green'}\r\n                title={`[${selectedProduct.id}] ${selectedProduct.description}`}\r\n                subtitle={selectedProduct.category.description}\r\n            />}\r\n            {renderUnits()}\r\n            <GenericTable\r\n                bodyColumns={isLoading ? [] : bodyColumns}\r\n                color=\"green\"\r\n                data={tableData}\r\n                headerColumns={headers}\r\n                isLoading={isLoading}\r\n                sortState={currentSortState}\r\n                onSortChange={onSortChange}\r\n            />\r\n            {graphicData.length > 0\r\n                && <div className={styles.graphicContainer}>\r\n                    {renderLineChart()}\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SingleProduct;","C:\\workspace\\shopping-app\\src\\sections\\purchases\\purchase_history.tsx",[],"C:\\workspace\\shopping-app\\src\\sections\\new_purchase\\new_purchase.tsx",[],"C:\\workspace\\shopping-app\\src\\sections\\sidebar_list\\sidebar_list.tsx",[],"C:\\workspace\\shopping-app\\src\\sections\\shopping_list\\shopping_list.tsx",[],"C:\\workspace\\shopping-app\\src\\components\\dialogs\\form_dialog.tsx",[],"C:\\workspace\\shopping-app\\src\\components\\dialogs\\confirmation_dialog.tsx",[],"C:\\workspace\\shopping-app\\src\\components\\autocomplete\\autocomplete.tsx",["281"],"import React from 'react';\r\n\r\nimport MaterialAutocomplete from '@material-ui/lab/Autocomplete';\r\nimport { TextField } from '@material-ui/core/';\r\nimport { IAutocompleteItem } from './types';\r\n\r\ninterface IProps {\r\n    disabled?: boolean;\r\n    freeSolo?: boolean;\r\n    selected?: IAutocompleteItem | null;\r\n    options: IAutocompleteItem[];\r\n    onChange: (selectedOption: IAutocompleteItem | string) => void;\r\n    title?: string;\r\n}\r\n\r\nconst Autocomplete = ({\r\n    disabled = false,\r\n    freeSolo = false,\r\n    options = [],\r\n    selected = null,\r\n    title = 'Selecione uma opção',\r\n    onChange\r\n}: IProps) => {\r\n    const handleChange = (evt: any, value: string) => {\r\n        const selectedObject = options.find((option) => option.description === value);\r\n        onChange(selectedObject || value);\r\n    };\r\n\r\n    return (\r\n        <MaterialAutocomplete\r\n            disabled={disabled}\r\n            freeSolo={freeSolo}\r\n            options={options.map((option) => option.description)}\r\n            renderInput={(params) => (\r\n                <TextField\r\n                    {...params}\r\n                    label={title}\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                />\r\n            )}\r\n            style={{ flex: 1 }}\r\n            value={selected?.description}\r\n            onInputChange={handleChange}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Autocomplete;\r\n","C:\\workspace\\shopping-app\\src\\components\\place_icon\\place_icon.tsx",[],"C:\\workspace\\shopping-app\\src\\components\\datepicker\\datepicker.tsx",[],"C:\\workspace\\shopping-app\\src\\components\\info_card\\info_card.tsx",[],"C:\\workspace\\shopping-app\\src\\components\\generic_table\\generic_table.tsx",["282","283"],"import React from 'react';\r\nimport { isMobile } from \"react-device-detect\";\r\n\r\nimport {\r\n    ArrowDropDown as ArrowDropDownIcon,\r\n    ArrowDropUp as ArrowDropUpIcon,\r\n} from '@material-ui/icons';\r\nimport {\r\n    Loading\r\n} from 'components/index';\r\n\r\nimport {\r\n    TBodyColumn,\r\n    THeaderColumn,\r\n    TSortingState\r\n} from './types';\r\n\r\nimport styles from './generic_table.module.scss';\r\n\r\nconst defaultSortingState = {\r\n    orderBy: 'description',\r\n    sort: 'ASC'\r\n};\r\n\r\ntype TProps = {\r\n    bodyColumns: TBodyColumn[];\r\n    color?: string;\r\n    data?: any[];\r\n    headerColumns: THeaderColumn[];\r\n    isLoading?: boolean;\r\n    sortState?: TSortingState;\r\n    lastRow?: null | (() => void);\r\n    onSortChange?: null | ((column: string, direction: string) => void);\r\n}\r\n\r\nconst GenericTable = ({\r\n    bodyColumns,\r\n    color = 'green',\r\n    data = [],\r\n    headerColumns,\r\n    isLoading = false,\r\n    sortState = defaultSortingState,\r\n    lastRow = null,\r\n    onSortChange = null\r\n}: TProps) => {\r\n    const setSortingState = (key: string) => {\r\n        let newDirection = 'ASC';\r\n        if (key === sortState.orderBy) {\r\n            newDirection = sortState.sort === 'ASC' ? 'DESC' : 'ASC';\r\n        }\r\n        if (onSortChange !== null) {\r\n            onSortChange(key, newDirection);\r\n        }\r\n    };\r\n\r\n    const renderSortIcon = (key: string) => {\r\n        if (onSortChange === null) {\r\n            return;\r\n        }\r\n\r\n        if (key !== sortState.orderBy) {\r\n            return <ArrowDropDownIcon classes={{ root: 'invisible' }} />;\r\n        }\r\n\r\n        if (sortState.sort === 'ASC') {\r\n            return <ArrowDropDownIcon classes={{ root: 'of-black' }} />;\r\n        }\r\n\r\n        return <ArrowDropUpIcon classes={{ root: 'of-black' }} />;\r\n    };\r\n\r\n    const renderHeader = () => {\r\n        const tableHeader = [...headerColumns];\r\n\r\n        const renderHeaderValue = (header: THeaderColumn) => {\r\n            if (header.sortable) {\r\n                return (\r\n                    <p\r\n                        className={styles.sortable}\r\n                        onClick={() => setSortingState(header.key)}\r\n                    >\r\n                        {header.renderFunction()}\r\n                    </p>\r\n                )\r\n            }\r\n\r\n            return (<p className=\"padding-none margin-none\">{header.renderFunction()}</p>);\r\n        };\r\n\r\n        return tableHeader.map((header) => {\r\n            if (isMobile && !header.showOnMobile) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <th key={header.key}>\r\n                    <div className={styles.column}>\r\n                        {renderHeaderValue(header)}\r\n                        {renderSortIcon(header.key)}\r\n                    </div>\r\n                </th>\r\n            );\r\n        });\r\n    };\r\n\r\n    const renderRow = (item: any) => {\r\n        return bodyColumns.map((column) => {\r\n            if (isMobile && !column.showOnMobile) {\r\n                return null;\r\n            }\r\n\r\n            return column.renderFunction(item);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <table className={styles.table}>\r\n            <thead className={styles[`${color}-bg`]}>\r\n                <tr>\r\n                    {renderHeader()}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {isLoading && <tr><td colSpan={20}><Loading /></td></tr>}\r\n                {data.length === 0 && !isLoading &&\r\n                    <tr><td className={styles.notFound} colSpan={20}><p>Nenhum resultado encontrado.</p></td></tr>\r\n                }\r\n                {!isLoading && data.map((item) => <tr>{renderRow(item)}</tr>)}\r\n                {lastRow !== null && !isLoading && lastRow()}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default GenericTable;","C:\\workspace\\shopping-app\\src\\components\\loading\\loading.tsx",[],"C:\\workspace\\shopping-app\\src\\components\\dropdown\\dropdown.tsx",[],"C:\\workspace\\shopping-app\\src\\components\\notification\\notification.tsx",["284","285"],"import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {\r\n    selectErrorMessage,\r\n    selectHasError,\r\n    isNotificationOpen\r\n} from 'store/main/selector';\r\n\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Alert(props: any) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst Notification = () => {\r\n    const dispatch = useDispatch();\r\n    const isOpen = useSelector(isNotificationOpen);\r\n    const hasError = useSelector(selectHasError);\r\n    const errorMessage = useSelector(selectErrorMessage);\r\n    const isErrorRelevant = errorMessage.includes('AbortError') ? false : true;\r\n\r\n    const toggleNotification = () => dispatch({\r\n        type: 'TOGGLE_NOTIFICATION',\r\n        status: false,\r\n        error: false,\r\n        errorMessage: ''\r\n    });\r\n\r\n    const handleClose = (_: any, reason: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        toggleNotification();\r\n    };\r\n\r\n    const message = hasError\r\n        ? errorMessage\r\n        : 'Sua ação foi registrada com sucesso!';\r\n\r\n    const severity = errorMessage\r\n        ? 'error'\r\n        : 'success';\r\n\r\n    return (\r\n        <Snackbar\r\n            autoHideDuration={4000}\r\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n            open={isOpen && isErrorRelevant}\r\n            onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity={severity}>\r\n                {message}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n};\r\n\r\nexport default Notification;\r\n","C:\\workspace\\shopping-app\\src\\components\\search_input\\search_input.tsx",[],"C:\\workspace\\shopping-app\\src\\components\\separator\\separator.tsx",[],"C:\\workspace\\shopping-app\\src\\sections\\products\\list\\products.tsx",["286"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\n// Actions\r\nimport {\r\n    deleteProduct,\r\n    fetchProducts,\r\n    fetchProductNames,\r\n    fetchProductCategoryNames,\r\n    saveProduct\r\n} from 'store/product/actions';\r\nimport { addToShoppingList } from 'store/shopping_list/actions';\r\nimport { convertToPurchase } from 'store/purchase/actions';\r\n\r\n// Selectors\r\nimport {\r\n    selectProductNames,\r\n    selectProductCategoryNames,\r\n    selectProducts,\r\n    selectProductsCount,\r\n    selectIsLoading\r\n} from 'store/product/selector';\r\nimport { selectShoppingList } from 'store/shopping_list/selector';\r\nimport { selectPurchaseList } from 'store/purchase/selector';\r\n\r\n// Components\r\nimport { Checkbox, Fab, IconButton } from '@material-ui/core';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport {\r\n    AddCircle as AddIcon,\r\n    AddShoppingCart,\r\n    Delete as DeleteIcon,\r\n    PlaylistAdd\r\n} from '@material-ui/icons';\r\nimport { GenericTable, SearchInput } from 'components/index';\r\nimport AddProductModal from 'sections/products/list/components/add_product_modal';\r\nimport DeleteProductModal from 'sections/products/list/components/delete_product_modal';\r\n\r\nimport { routes } from 'constants/routes';\r\nimport { resultsPerPage } from 'constants/general';\r\nimport {\r\n    TItemName,\r\n    TProduct,\r\n    TPurchaseItem,\r\n    TShoppingListItem\r\n} from 'constants/objectInterfaces';\r\nimport { TSortingState } from 'components/generic_table/types';\r\nimport { IAutocompleteItem } from 'components/autocomplete/types';\r\nimport { invertSort } from 'utils/utils';\r\nimport styles from './products.module.scss';\r\n\r\nconst defaultSortState = {\r\n    orderBy: 'description',\r\n    sort: 'ASC'\r\n};\r\n\r\nconst ProductsList = () => {\r\n    const [checkedProducts, setCheckedProducts] = useState<TProduct[]>([]);\r\n    const [currentPage, setCurrentPage] = useState<number>(1);\r\n    const [currentSortState, setCurrentSortState] = useState<TSortingState>(defaultSortState);\r\n    const [isAddProductOpen, setIsAddProductOpen] = useState(false);\r\n    const [searchField, setSearchField] = useState<string>('');\r\n    const [toBeDeleted, setToBeDeleted] = useState<TProduct | null>(null);\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const productNames: TItemName[] = useSelector(selectProductNames);\r\n    const productCategoryNames: TItemName[] = useSelector(selectProductCategoryNames);\r\n    const mergedNames = [...productNames, ...productCategoryNames]\r\n        .sort((a, b) => a.description.localeCompare(b.description));\r\n\r\n    const products: TProduct[] = useSelector(selectProducts);\r\n    const totalCount = useSelector(selectProductsCount);\r\n    const shoppingList: TShoppingListItem[] = useSelector(selectShoppingList);\r\n    const isProductsLoading: boolean = useSelector(selectIsLoading);\r\n    const purchaseList: TPurchaseItem[] = useSelector(selectPurchaseList);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchProducts(currentPage - 1));\r\n        if (productNames.length === 0) {\r\n            dispatch(fetchProductNames());\r\n        }\r\n\r\n        if (productCategoryNames.length === 0) {\r\n            dispatch(fetchProductCategoryNames());\r\n        }\r\n    }, []);\r\n\r\n    const headers = [\r\n        {\r\n            key: 'actions',\r\n            renderFunction: () => '',\r\n            sortable: false,\r\n            showOnMobile: true\r\n        },\r\n        {\r\n            key: 'id',\r\n            renderFunction: () => 'Id',\r\n            sortable: true,\r\n            showOnMobile: false\r\n        },\r\n        {\r\n            key: 'category',\r\n            renderFunction: () => 'Categoria',\r\n            sortable: true,\r\n            showOnMobile: false\r\n        },\r\n        {\r\n            key: 'description',\r\n            renderFunction: () => 'Produto',\r\n            sortable: true,\r\n            showOnMobile: true\r\n        },\r\n        {\r\n            key: 'delete',\r\n            renderFunction: () => '',\r\n            sortable: false,\r\n            showOnMobile: true\r\n        }\r\n    ];\r\n\r\n    const renderDeleteIcon = (item: TProduct) => (\r\n        <IconButton\r\n            aria-label=\"delete\"\r\n            classes={{ root: styles.icon }}\r\n            onClick={() => setToBeDeleted(item)}\r\n        >\r\n            <DeleteIcon classes={{ root: styles.icon }} />\r\n        </IconButton>\r\n    );\r\n\r\n    const onCheckboxClick = (item: TProduct) => {\r\n        let updatedCheckedProducts;\r\n        const index = checkedProducts.findIndex((product: TProduct) => product.id === item.id);\r\n        if (index === -1) {\r\n            updatedCheckedProducts = [\r\n                ...checkedProducts,\r\n                item\r\n            ];\r\n        } else {\r\n            const filteredProducts = checkedProducts.filter((product: TProduct) => item.id !== product.id);\r\n            updatedCheckedProducts = [...filteredProducts];\r\n        }\r\n\r\n        setCheckedProducts(updatedCheckedProducts);\r\n    };\r\n\r\n    const isChecked = (item: TProduct) => (checkedProducts.findIndex((product: TProduct) => product.id === item.id) !== -1);\r\n    const renderCheckbox = (item: TProduct) => (\r\n        <Checkbox\r\n            checked={isChecked(item)}\r\n            size=\"small\"\r\n            inputProps={{ 'aria-label': 'checkbox with small size' }}\r\n            onClick={() => onCheckboxClick(item)}\r\n        />\r\n    );\r\n\r\n    const renderAddToShoppingList = (item: TProduct) => (\r\n        <IconButton\r\n            aria-label=\"add\"\r\n            onClick={() => onAddToShoppingList(item)}\r\n        >\r\n            <PlaylistAdd classes={{ root: 'of-green' }} />\r\n        </IconButton>\r\n    );\r\n\r\n    const bodyColumns = [\r\n        {\r\n            key: 'actions',\r\n            renderFunction: (item: TProduct) => <td>{renderCheckbox(item)} {renderAddToShoppingList(item)}</td>,\r\n            showOnMobile: true\r\n        },\r\n        {\r\n            key: 'id',\r\n            renderFunction: (item: TProduct) => <td className=\"align-left\">{item.id}</td>,\r\n            showOnMobile: false\r\n        },\r\n        {\r\n            key: 'category',\r\n            renderFunction: (item: TProduct) => <td className=\"align-left\">{item.category.description}</td>,\r\n            showOnMobile: false\r\n        },\r\n        {\r\n            key: 'description',\r\n            renderFunction: (item: TProduct) => (\r\n                <td className=\"align-left\">\r\n                    <Link to={routes.PRODUCT + `/${item.id}`}>{item.description}</Link>\r\n                </td>\r\n            ),\r\n            showOnMobile: true\r\n        },\r\n        {\r\n            key: 'delete',\r\n            renderFunction: (item: TProduct) => <td className=\"align-right\">{renderDeleteIcon(item)}</td>,\r\n            showOnMobile: true\r\n        }\r\n    ];\r\n\r\n    const onDeleteProduct = () => {\r\n        if (toBeDeleted) {\r\n            dispatch(deleteProduct(\r\n                toBeDeleted,\r\n                currentPage - 1,\r\n                currentSortState,\r\n                searchField\r\n            ));\r\n        }\r\n\r\n        setToBeDeleted(null);\r\n    }\r\n\r\n    const onAddNewProduct = (product: TProduct) => {\r\n        dispatch(saveProduct(\r\n            product,\r\n            currentPage - 1,\r\n            currentSortState,\r\n            searchField\r\n        ));\r\n        setIsAddProductOpen(false);\r\n    };\r\n\r\n    const onAddToShoppingList = (product: TProduct) => {\r\n        dispatch(addToShoppingList(product));\r\n    };\r\n\r\n    const onSortChange = (orderBy: string, sort: string) => {\r\n        const newSort: string = orderBy === currentSortState.orderBy ? invertSort(currentSortState.sort) : sort;\r\n\r\n        setCurrentSortState({ orderBy, sort: newSort });\r\n        dispatch(fetchProducts(currentPage - 1, { orderBy, sort: newSort }, searchField));\r\n    };\r\n\r\n    const onConvertClick = () => {\r\n        dispatch(convertToPurchase(checkedProducts, purchaseList));\r\n        history.push(routes.NEW_PURCHASE);\r\n    };\r\n\r\n    const onPageChange = (newPage: number) => {\r\n        setCurrentPage(newPage);\r\n        dispatch(fetchProducts(newPage - 1, currentSortState, searchField));\r\n    };\r\n\r\n    const onSearch = (item: IAutocompleteItem | string | null) => {\r\n        let newSearchInput = '';\r\n        if (item !== null) {\r\n            newSearchInput = typeof (item) === 'string' ? item : item.description;\r\n        }\r\n\r\n        setSearchField(newSearchInput);\r\n        if (newSearchInput.length >= 2 || newSearchInput.length === 0) {\r\n            dispatch(fetchProducts(0, currentSortState, newSearchInput));\r\n        }\r\n    };\r\n\r\n    const renderFab = () => {\r\n        if (checkedProducts.length > 0) {\r\n            return (\r\n                <Fab\r\n                    classes={{ root: 'of-cyan-bg' }}\r\n                    className=\"fab-bottom\"\r\n                    size=\"large\"\r\n                    variant=\"extended\"\r\n                    onClick={onConvertClick}\r\n                >\r\n                    <AddShoppingCart />&nbsp;\r\n                    Converter em compra\r\n                </Fab>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Fab\r\n                classes={{ root: 'of-green-bg' }}\r\n                className=\"fab-bottom\"\r\n                size=\"large\"\r\n                variant=\"extended\"\r\n                onClick={() => setIsAddProductOpen(true)}\r\n            >\r\n                <AddIcon />&nbsp;\r\n                Novo produto\r\n            </Fab>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {renderFab()}\r\n            <div className={styles.container}>\r\n                <SearchInput\r\n                    options={mergedNames}\r\n                    onSearch={onSearch}\r\n                />\r\n                <div className={styles.pagination}>\r\n                    <Pagination\r\n                        color=\"primary\"\r\n                        count={Math.ceil(totalCount / resultsPerPage)}\r\n                        page={currentPage}\r\n                        size=\"large\"\r\n                        shape=\"rounded\"\r\n                        onChange={(event, newPage) => onPageChange(newPage)}\r\n                    />\r\n                </div>\r\n                <GenericTable\r\n                    bodyColumns={isProductsLoading ? [] : bodyColumns}\r\n                    color=\"green\"\r\n                    data={products}\r\n                    headerColumns={headers}\r\n                    isLoading={isProductsLoading}\r\n                    sortState={currentSortState}\r\n                    onSortChange={(column: string, direction: string) => onSortChange(column, direction)}\r\n                />\r\n                <AddProductModal\r\n                    value={searchField}\r\n                    isOpen={isAddProductOpen}\r\n                    onClose={() => setIsAddProductOpen(false)}\r\n                    onConfirm={onAddNewProduct}\r\n                />\r\n                <DeleteProductModal\r\n                    product={toBeDeleted}\r\n                    onClose={() => setToBeDeleted(null)}\r\n                    onConfirm={onDeleteProduct}\r\n                />\r\n                <div className={styles.pagination}>\r\n                    <Pagination\r\n                        color=\"primary\"\r\n                        count={Math.ceil(totalCount / resultsPerPage)}\r\n                        page={currentPage}\r\n                        size=\"large\"\r\n                        shape=\"rounded\"\r\n                        onChange={(event, newPage) => onPageChange(newPage)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default ProductsList;\r\n","C:\\workspace\\shopping-app\\src\\sections\\places\\list\\places.tsx",[],"C:\\workspace\\shopping-app\\src\\sections\\products\\categories\\products_categories.tsx",[],"C:\\workspace\\shopping-app\\src\\sections\\places\\categories\\places_categories.tsx",[],"C:\\workspace\\shopping-app\\src\\store\\main\\selector.js",[],"C:\\workspace\\shopping-app\\src\\store\\place\\actions.ts",[],"C:\\workspace\\shopping-app\\src\\store\\place\\selector.ts",[],"C:\\workspace\\shopping-app\\src\\sections\\places\\list\\components\\delete_place_modal.tsx",[],"C:\\workspace\\shopping-app\\src\\sections\\places\\list\\components\\add_place_modal.tsx",["287"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// Actions\r\nimport { fetchPlaceCategories } from 'store/place/actions';\r\n\r\n// Selectors\r\nimport { selectPlaceCategories } from 'store/place/selector';\r\n\r\nimport { TextField } from '@material-ui/core';\r\nimport { FormDialog, Autocomplete } from 'components/index';\r\n\r\nimport {\r\n    TPlace,\r\n    TCategory\r\n} from 'constants/objectInterfaces';\r\nimport {\r\n    place as placeModel\r\n} from 'constants/objectModels';\r\nimport { IAutocompleteItem } from 'components/autocomplete/types';\r\n\r\nimport styles from './modal.module.scss';\r\n\r\ninterface IProps {\r\n    isOpen: boolean;\r\n    onClose: () => void;\r\n    onConfirm: (object: TPlace) => void;\r\n}\r\n\r\nconst AddPlaceModal = ({\r\n    isOpen,\r\n    onClose,\r\n    onConfirm\r\n}: IProps) => {\r\n    const [selectedItem, setSelectedItem] = useState<TPlace>(placeModel);\r\n    const categories: TCategory[] = useSelector(selectPlaceCategories);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchPlaceCategories(null));\r\n    }, []);\r\n\r\n    const onDescriptionChange = (event: any) => {\r\n        const value = event.target.value;\r\n\r\n        if (value) {\r\n            const category = {\r\n                id: selectedItem.category.id,\r\n                description: selectedItem.category.description\r\n            };\r\n\r\n            setSelectedItem({\r\n                ...selectedItem,\r\n                created: selectedItem?.created || '',\r\n                category: category,\r\n                description: value,\r\n                id: selectedItem?.id\r\n            });\r\n        }\r\n    };\r\n\r\n    const onCategoryChange = (\r\n        category: IAutocompleteItem | string\r\n    ) => {\r\n        if (typeof category !== 'string') {\r\n            const newCategory = {\r\n                id: category.id,\r\n                description: category.description\r\n            };\r\n\r\n            setSelectedItem({\r\n                ...selectedItem,\r\n                category: newCategory\r\n            })\r\n        }\r\n    };\r\n\r\n    const renderAddDialogForm = () => (\r\n        <>\r\n            <TextField\r\n                autoFocus\r\n                fullWidth\r\n                id=\"description\"\r\n                label=\"Nome\"\r\n                type=\"text\"\r\n                onChange={onDescriptionChange}\r\n            />\r\n            <div className={styles.minPadding}>\r\n                <Autocomplete\r\n                    options={categories}\r\n                    title=\"Categoria\"\r\n                    onChange={onCategoryChange}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <FormDialog\r\n            isEnable={selectedItem.description !== '' && selectedItem.category.id !== null}\r\n            isOpen={isOpen}\r\n            onClose={onClose}\r\n            onConfirm={() => selectedItem ? onConfirm(selectedItem) : null}\r\n            title='Adicionar Novo Lugar'\r\n        >\r\n            {renderAddDialogForm()}\r\n        </FormDialog>\r\n    );\r\n};\r\n\r\nexport default AddPlaceModal;\r\n","C:\\workspace\\shopping-app\\src\\utils\\utils.ts",["288","289"],"export const twoDecimals = (value: number) => (Math.round(value * 100) / 100);\r\n\r\nexport const dynamicSort = (property: string) => {\r\n    let sortOrder = 1;\r\n    if (property[0] === \"-\") {\r\n        sortOrder = -1;\r\n        property = property.substr(1);\r\n    }\r\n    return function (a: any, b: any) {\r\n        /* next line works with strings and numbers, \r\n         * and you may want to customize it to your needs\r\n         */\r\n        const result = a[property].localeCompare(b[property]);\r\n        return result * sortOrder;\r\n    }\r\n}\r\n\r\nexport const invertSort = (sort: string) => {\r\n    if (sort === 'ASC') {\r\n        return 'DESC';\r\n    }\r\n\r\n    return 'ASC';\r\n}\r\n","C:\\workspace\\shopping-app\\src\\store\\product\\selector.ts",[],"C:\\workspace\\shopping-app\\src\\store\\product\\actions.ts",[],"C:\\workspace\\shopping-app\\src\\constants\\general.tsx",[],"C:\\workspace\\shopping-app\\src\\store\\purchase\\selector.ts",[],"C:\\workspace\\shopping-app\\src\\store\\purchase\\actions.ts",[],"C:\\workspace\\shopping-app\\src\\store\\shopping_list\\selector.ts",[],"C:\\workspace\\shopping-app\\src\\store\\shopping_list\\actions.ts",[],"C:\\workspace\\shopping-app\\src\\sections\\products\\list\\components\\delete_product_modal.tsx",[],"C:\\workspace\\shopping-app\\src\\sections\\products\\list\\components\\add_product_modal.tsx",["290"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// Actions\r\nimport { fetchProductCategories } from 'store/product/actions';\r\n\r\n// Selectors\r\nimport { selectProductCategories } from 'store/product/selector';\r\n\r\nimport { TextField } from '@material-ui/core';\r\nimport { FormDialog, Autocomplete } from 'components/index';\r\nimport {\r\n    product as productModel\r\n} from 'constants/objectModels';\r\n\r\nimport {\r\n    TProduct,\r\n    TCategory\r\n} from 'constants/objectInterfaces';\r\nimport { IAutocompleteItem } from 'components/autocomplete/types';\r\n\r\nimport styles from './modal.module.scss';\r\n\r\ninterface IProps {\r\n    isOpen: boolean;\r\n    value: string;\r\n    onClose: () => void;\r\n    onConfirm: (object: TProduct) => void;\r\n}\r\n\r\nconst AddProductModal = ({\r\n    isOpen,\r\n    value = '',\r\n    onClose,\r\n    onConfirm\r\n}: IProps) => {\r\n    const [selectedItem, setSelectedItem] = useState<TProduct>(productModel);\r\n    const categories: TCategory[] = useSelector(selectProductCategories);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            dispatch(fetchProductCategories(null));\r\n            setSelectedItem({\r\n                ...selectedItem,\r\n                description: value\r\n            });\r\n        }\r\n    }, [isOpen]);\r\n\r\n    const onDescriptionChange = (event: any) => {\r\n        const newDescription = event.target.value;\r\n        setSelectedItem({\r\n            ...selectedItem,\r\n            description: newDescription\r\n        });\r\n    };\r\n\r\n    const onCategoryChange = (\r\n        category: IAutocompleteItem | string\r\n    ) => {\r\n        if (typeof category !== 'string') {\r\n            const newCategory = {\r\n                id: category.id,\r\n                description: category.description\r\n            };\r\n            setSelectedItem({\r\n                ...selectedItem,\r\n                category: newCategory\r\n            })\r\n        }\r\n    };\r\n\r\n    const renderAddDialogForm = () => (\r\n        <>\r\n            <TextField\r\n                autoFocus\r\n                fullWidth\r\n                classes={{ root: 'of-white' }}\r\n                id=\"description\"\r\n                label=\"Nome\"\r\n                type=\"text\"\r\n                value={selectedItem.description}\r\n                onChange={onDescriptionChange}\r\n            />\r\n            <div className={styles.minPadding}>\r\n                <Autocomplete\r\n                    options={categories}\r\n                    title=\"Categoria\"\r\n                    onChange={onCategoryChange}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <FormDialog\r\n            isEnable={selectedItem.description !== '' && selectedItem.category.id !== null}\r\n            isOpen={isOpen}\r\n            onClose={onClose}\r\n            onConfirm={() => onConfirm(selectedItem)}\r\n            title='Adicionar Novo Produto'\r\n        >\r\n            {renderAddDialogForm()}\r\n        </FormDialog>\r\n    );\r\n};\r\n\r\nexport default AddProductModal;","C:\\workspace\\shopping-app\\src\\services\\dataSetters.ts",[],"C:\\workspace\\shopping-app\\src\\services\\dataGetters.ts",[],"C:\\workspace\\shopping-app\\src\\services\\dataDeleters.ts",[],"C:\\workspace\\shopping-app\\src\\constants\\objectModels.tsx",[],"C:\\workspace\\shopping-app\\src\\services\\utilities.js",[],"C:\\workspace\\shopping-app\\src\\constants\\products.tsx",[],"C:\\workspace\\shopping-app\\src\\sections\\new_purchase\\components\\product_card.tsx",["291","292","293"],"import React, { useMemo } from 'react';\r\n\r\nimport {\r\n    Checkbox,\r\n    IconButton,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport { Remove as RemoveIcon } from '@material-ui/icons';\r\nimport { Autocomplete, InfoCard } from 'components/index';\r\n\r\nimport { getUnitObject, productUnits } from 'constants/products';\r\nimport {\r\n    TBrand,\r\n    TPurchaseItem\r\n} from 'constants/objectInterfaces';\r\nimport { twoDecimals } from 'utils/utils';\r\n\r\nimport styles from './product_card.module.scss';\r\n\r\ntype TProps = {\r\n    brands: TBrand[];\r\n    color: string;\r\n    purchaseItem: TPurchaseItem\r\n    onDelete: (item: TPurchaseItem) => void;\r\n    onUpdate: (item: TPurchaseItem) => void;\r\n};\r\n\r\nconst ProductCard = ({\r\n    brands,\r\n    color,\r\n    purchaseItem,\r\n    onDelete,\r\n    onUpdate\r\n}: TProps) => {\r\n    const checkNumberInputRegex = (event: any) => {\r\n        const { id, value } = event.target;\r\n\r\n        const pattern = /^\\d*[.,]?\\d*$/;\r\n        if (pattern.test(value)) {\r\n            onUpdate({\r\n                ...purchaseItem,\r\n                [id]: value.replace(',', '.')\r\n            })\r\n        }\r\n    };\r\n\r\n    const renderContent = () => (\r\n        <div>\r\n            <div className={styles.cardElementContainer}>\r\n                <Autocomplete\r\n                    options={brands}\r\n                    selected={purchaseItem.brand && purchaseItem.brand.id !== null ? purchaseItem.brand : null}\r\n                    title=\"Marca\"\r\n                    onChange={(item: any) => onUpdate({\r\n                        ...purchaseItem,\r\n                        brand: {\r\n                            description: item ? item.description : '',\r\n                            id: item ? item.id : null\r\n                        }\r\n                    })}\r\n                />\r\n            </div>\r\n            <div className={styles.cardElementContainer}>\r\n                <div className={styles.cardElement}>\r\n                    <TextField\r\n                        required\r\n                        id=\"quantity\"\r\n                        label=\"Qtd\"\r\n                        type=\"string\"\r\n                        value={purchaseItem.quantity}\r\n                        onChange={(e) => checkNumberInputRegex(e)}\r\n                    />\r\n                </div>\r\n                <div className={styles.cardElement}>\r\n                    <Autocomplete\r\n                        options={productUnits}\r\n                        selected={getUnitObject(purchaseItem.unit)}\r\n                        title=\"Unidade\"\r\n                        onChange={(item: any) => {\r\n                            onUpdate({\r\n                                ...purchaseItem,\r\n                                unit: item.id\r\n                            })\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={styles.cardElementContainer}>\r\n                <div className={styles.cardElement}>\r\n                    <TextField\r\n                        required\r\n                        id=\"price\"\r\n                        label={`€/${getUnitObject(purchaseItem.unit).description}`}\r\n                        type=\"string\"\r\n                        value={purchaseItem.price}\r\n                        onChange={(e) => checkNumberInputRegex(e)}\r\n                    />\r\n                </div>\r\n                <div className={styles.promo}>\r\n                    Promo?\r\n                    <Checkbox\r\n                        checked={purchaseItem.discount}\r\n                        size=\"small\"\r\n                        inputProps={{ 'aria-label': 'checkbox with small size' }}\r\n                        onChange={(e) => onUpdate({\r\n                            ...purchaseItem,\r\n                            discount: e.target.checked\r\n                        })}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={styles.cardElementContainer}>\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"details\"\r\n                    label=\"Detalhes\"\r\n                    type=\"text\"\r\n                    value={purchaseItem.details}\r\n                    onChange={(e) => onUpdate({\r\n                        ...purchaseItem,\r\n                        details: e.target.value\r\n                    })}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const memoizedContent = useMemo(renderContent, [purchaseItem]);\r\n\r\n    const renderButton = () => (\r\n        <IconButton\r\n            aria-label=\"settings\"\r\n            onClick={() => onDelete(purchaseItem)}\r\n        >\r\n            <RemoveIcon classes={{ root: 'of-red' }} />\r\n        </IconButton>\r\n    )\r\n    const renderFooter = () => {\r\n        const totalPrice = parseFloat(purchaseItem.price) > 0 && parseFloat(purchaseItem.quantity) > 0\r\n            ? twoDecimals(parseFloat(purchaseItem.price) * parseFloat(purchaseItem.quantity))\r\n            : 0;\r\n\r\n        return (\r\n            <div className={totalPrice > 0 ? styles.totalCardFooterValid : styles.totalCardFooter}>\r\n                € {totalPrice.toFixed(2)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <InfoCard\r\n            color={color}\r\n            title={purchaseItem.product.description}\r\n            subtitle={purchaseItem.product.category.description}\r\n            renderFooter={renderFooter}\r\n            renderButton={renderButton}\r\n        >\r\n            {memoizedContent}\r\n        </InfoCard>\r\n    );\r\n};\r\n\r\nconst arePropsEqual = (prevItem: TProps, nextItem: TProps) => {\r\n    return JSON.stringify(prevItem.purchaseItem) === JSON.stringify(nextItem.purchaseItem);\r\n};\r\n\r\nexport default React.memo(ProductCard, arePropsEqual);\r\n","C:\\workspace\\shopping-app\\src\\sections\\purchases\\components\\full_purchase.tsx",[],"C:\\workspace\\shopping-app\\src\\sections\\categories\\components\\add_category_modal.tsx",["294","295"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport { TextField } from '@material-ui/core';\r\nimport { FormDialog } from 'components/index';\r\n\r\ninterface IProps {\r\n    value: string;\r\n    isOpen: boolean;\r\n    onClose: () => void;\r\n    onConfirm: (object: any) => void;\r\n}\r\n\r\nconst AddCategoryModal = ({\r\n    isOpen,\r\n    value = '',\r\n    onClose,\r\n    onConfirm\r\n}: IProps) => {\r\n    const [newCategory, setNewCategory] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        setNewCategory(value);\r\n    }, [isOpen]);\r\n\r\n    const onDescriptionChange = (event: any) => {\r\n        const value = event.target.value;\r\n        setNewCategory(value);\r\n    };\r\n\r\n    return (\r\n        <FormDialog\r\n            isEnable={newCategory !== ''}\r\n            isOpen={isOpen}\r\n            onClose={onClose}\r\n            onConfirm={() => onConfirm(newCategory)}\r\n            title='Adicionar Nova Categoria'\r\n        >\r\n            <TextField\r\n                autoFocus\r\n                fullWidth\r\n                id=\"description\"\r\n                label=\"Nome\"\r\n                type=\"text\"\r\n                value={newCategory}\r\n                onChange={onDescriptionChange}\r\n            />\r\n        </FormDialog>\r\n    );\r\n};\r\n\r\nexport default AddCategoryModal;\r\n","C:\\workspace\\shopping-app\\src\\sections\\categories\\components\\delete_category_modal.tsx",["296"],"import React from 'react';\r\n\r\nimport { TextField } from '@material-ui/core';\r\nimport { TCategory } from 'constants/objectInterfaces';\r\n\r\nimport ConfirmationDialog from 'components/dialogs/confirmation_dialog';\r\n\r\ninterface IProps {\r\n    category: TCategory | null;\r\n    onClose: () => void;\r\n    onConfirm: (object: any) => void;\r\n}\r\n\r\nconst DeleteCategoryModal = ({\r\n    onClose,\r\n    onConfirm,\r\n    category\r\n}: IProps) => {\r\n    const renderContent = () => {\r\n        return (\r\n            <>\r\n                <TextField\r\n                    disabled\r\n                    fullWidth\r\n                    id=\"description\"\r\n                    label=\"Nome\"\r\n                    type=\"text\"\r\n                    value={category?.description}\r\n                />\r\n            </>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <ConfirmationDialog\r\n            open={category !== null}\r\n            onClose={onClose}\r\n            onConfirm={() => onConfirm(category)}\r\n            title='Remover Categoria'\r\n            content={renderContent()}\r\n        />\r\n    );\r\n};\r\n\r\nexport default DeleteCategoryModal;\r\n","C:\\workspace\\shopping-app\\src\\sections\\brands\\components\\delete_brand_modal.tsx",[],"C:\\workspace\\shopping-app\\src\\sections\\brands\\components\\add_brand_modal.tsx",["297"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport { TextField } from '@material-ui/core';\r\nimport { FormDialog } from 'components/index';\r\nimport { TBrand } from 'constants/objectInterfaces';\r\n\r\ninterface IProps {\r\n    isOpen: boolean;\r\n    value: string;\r\n    onClose: () => void;\r\n    onConfirm: (newBrand: TBrand) => void;\r\n}\r\n\r\nconst AddBrandModal = ({\r\n    isOpen,\r\n    value = '',\r\n    onClose,\r\n    onConfirm\r\n}: IProps) => {\r\n    const [brandName, setBrandName] = useState<string>('');\r\n    useEffect(() => {\r\n        setBrandName(value);\r\n    }, [isOpen]);\r\n\r\n    const onDescriptionChange = (event: any) => {\r\n        const value = event.target.value;\r\n        setBrandName(value);\r\n    };\r\n\r\n    const onDialogConfirm = () => {\r\n        const newBrand: TBrand = {\r\n            id: null,\r\n            created: '',\r\n            description: brandName\r\n        };\r\n\r\n        onConfirm(newBrand);\r\n    }\r\n\r\n    return (\r\n        <FormDialog\r\n            isEnable={brandName !== ''}\r\n            isOpen={isOpen}\r\n            onClose={onClose}\r\n            onConfirm={onDialogConfirm}\r\n            title='Adicionar Nova Marca'\r\n        >\r\n            <TextField\r\n                autoFocus\r\n                fullWidth\r\n                id=\"description\"\r\n                label=\"Nome\"\r\n                type=\"text\"\r\n                value={brandName}\r\n                onChange={onDescriptionChange}\r\n            />\r\n        </FormDialog>\r\n    );\r\n};\r\n\r\nexport default AddBrandModal;\r\n","C:\\workspace\\shopping-app\\src\\store\\brand\\actions.ts",[],"C:\\workspace\\shopping-app\\src\\store\\brand\\selector.ts",[],{"ruleId":"298","severity":1,"message":"299","line":118,"column":34,"nodeType":"300","messageId":"301","endLine":118,"endColumn":37,"suggestions":"302"},{"ruleId":"298","severity":1,"message":"299","line":208,"column":49,"nodeType":"300","messageId":"301","endLine":208,"endColumn":52,"suggestions":"303"},{"ruleId":"298","severity":1,"message":"299","line":24,"column":32,"nodeType":"300","messageId":"301","endLine":24,"endColumn":35,"suggestions":"304"},{"ruleId":"298","severity":1,"message":"299","line":28,"column":12,"nodeType":"300","messageId":"301","endLine":28,"endColumn":15,"suggestions":"305"},{"ruleId":"298","severity":1,"message":"299","line":106,"column":30,"nodeType":"300","messageId":"301","endLine":106,"endColumn":33,"suggestions":"306"},{"ruleId":"298","severity":1,"message":"299","line":13,"column":23,"nodeType":"300","messageId":"301","endLine":13,"endColumn":26,"suggestions":"307"},{"ruleId":"298","severity":1,"message":"299","line":31,"column":29,"nodeType":"300","messageId":"301","endLine":31,"endColumn":32,"suggestions":"308"},{"ruleId":"309","severity":1,"message":"310","line":76,"column":11,"nodeType":"311","messageId":"312","endLine":76,"endColumn":44},{"ruleId":"298","severity":1,"message":"299","line":44,"column":41,"nodeType":"300","messageId":"301","endLine":44,"endColumn":44,"suggestions":"313"},{"ruleId":"298","severity":1,"message":"299","line":9,"column":25,"nodeType":"300","messageId":"301","endLine":9,"endColumn":28,"suggestions":"314"},{"ruleId":"298","severity":1,"message":"299","line":9,"column":33,"nodeType":"300","messageId":"301","endLine":9,"endColumn":36,"suggestions":"315"},{"ruleId":"298","severity":1,"message":"299","line":52,"column":41,"nodeType":"300","messageId":"301","endLine":52,"endColumn":44,"suggestions":"316"},{"ruleId":"298","severity":1,"message":"299","line":35,"column":43,"nodeType":"300","messageId":"301","endLine":35,"endColumn":46,"suggestions":"317"},{"ruleId":"298","severity":1,"message":"299","line":54,"column":38,"nodeType":"300","messageId":"301","endLine":54,"endColumn":41,"suggestions":"318"},{"ruleId":"298","severity":1,"message":"299","line":79,"column":42,"nodeType":"300","messageId":"301","endLine":79,"endColumn":45,"suggestions":"319"},{"ruleId":"298","severity":1,"message":"299","line":10,"column":25,"nodeType":"300","messageId":"301","endLine":10,"endColumn":28,"suggestions":"320"},{"ruleId":"298","severity":1,"message":"299","line":25,"column":41,"nodeType":"300","messageId":"301","endLine":25,"endColumn":44,"suggestions":"321"},{"ruleId":"298","severity":1,"message":"299","line":11,"column":25,"nodeType":"300","messageId":"301","endLine":11,"endColumn":28,"suggestions":"322"},{"ruleId":"298","severity":1,"message":"299","line":25,"column":41,"nodeType":"300","messageId":"301","endLine":25,"endColumn":44,"suggestions":"323"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["324","325"],["326","327"],["328","329"],["330","331"],["332","333"],["334","335"],["336","337"],"@typescript-eslint/no-unused-vars","'shoppingList' is assigned a value but never used.","Identifier","unusedVar",["338","339"],["340","341"],["342","343"],["344","345"],["346","347"],["348","349"],["350","351"],["352","353"],["354","355"],["356","357"],["358","359"],{"messageId":"360","fix":"361","desc":"362"},{"messageId":"363","fix":"364","desc":"365"},{"messageId":"360","fix":"366","desc":"362"},{"messageId":"363","fix":"367","desc":"365"},{"messageId":"360","fix":"368","desc":"362"},{"messageId":"363","fix":"369","desc":"365"},{"messageId":"360","fix":"370","desc":"362"},{"messageId":"363","fix":"371","desc":"365"},{"messageId":"360","fix":"372","desc":"362"},{"messageId":"363","fix":"373","desc":"365"},{"messageId":"360","fix":"374","desc":"362"},{"messageId":"363","fix":"375","desc":"365"},{"messageId":"360","fix":"376","desc":"362"},{"messageId":"363","fix":"377","desc":"365"},{"messageId":"360","fix":"378","desc":"362"},{"messageId":"363","fix":"379","desc":"365"},{"messageId":"360","fix":"380","desc":"362"},{"messageId":"363","fix":"381","desc":"365"},{"messageId":"360","fix":"382","desc":"362"},{"messageId":"363","fix":"383","desc":"365"},{"messageId":"360","fix":"384","desc":"362"},{"messageId":"363","fix":"385","desc":"365"},{"messageId":"360","fix":"386","desc":"362"},{"messageId":"363","fix":"387","desc":"365"},{"messageId":"360","fix":"388","desc":"362"},{"messageId":"363","fix":"389","desc":"365"},{"messageId":"360","fix":"390","desc":"362"},{"messageId":"363","fix":"391","desc":"365"},{"messageId":"360","fix":"392","desc":"362"},{"messageId":"363","fix":"393","desc":"365"},{"messageId":"360","fix":"394","desc":"362"},{"messageId":"363","fix":"395","desc":"365"},{"messageId":"360","fix":"396","desc":"362"},{"messageId":"363","fix":"397","desc":"365"},{"messageId":"360","fix":"398","desc":"362"},{"messageId":"363","fix":"399","desc":"365"},"suggestUnknown",{"range":"400","text":"401"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"400","text":"402"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"403","text":"401"},{"range":"403","text":"402"},{"range":"404","text":"401"},{"range":"404","text":"402"},{"range":"405","text":"401"},{"range":"405","text":"402"},{"range":"406","text":"401"},{"range":"406","text":"402"},{"range":"407","text":"401"},{"range":"407","text":"402"},{"range":"408","text":"401"},{"range":"408","text":"402"},{"range":"409","text":"401"},{"range":"409","text":"402"},{"range":"410","text":"401"},{"range":"410","text":"402"},{"range":"411","text":"401"},{"range":"411","text":"402"},{"range":"412","text":"401"},{"range":"412","text":"402"},{"range":"413","text":"401"},{"range":"413","text":"402"},{"range":"414","text":"401"},{"range":"414","text":"402"},{"range":"415","text":"401"},{"range":"415","text":"402"},{"range":"416","text":"401"},{"range":"416","text":"402"},{"range":"417","text":"401"},{"range":"417","text":"402"},{"range":"418","text":"401"},{"range":"418","text":"402"},{"range":"419","text":"401"},{"range":"419","text":"402"},[3573,3576],"unknown","never",[6649,6652],[646,649],[556,559],[2853,2856],[324,327],[917,920],[1152,1155],[286,289],[294,297],[1377,1380],[843,846],[1484,1487],[2552,2555],[265,268],[573,576],[316,319],[621,624]]